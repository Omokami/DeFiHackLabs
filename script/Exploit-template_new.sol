// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.15;

import "forge-std/Test.sol";

// @KeyInfo - Total Lost : ~999M US$
// Attacker : 0xcafebabe
// Attack Contract : attackcontractaddrhere
// Vulnerable Contract : vulcontractaddrhere
// Attack Tx : 0x123456789

// @Info
// Vulnerable Contract Code : https://etherscan.io/address/0xdeadbeef#code

// @Analysis
// Post-mortem : postmortemurlhere
// Twitter Guy : twitterguyhere
// Hacking God : hackinggodhere
pragma solidity ^0.8.0;

//Small helper lib to not need to import interface.sol,feel free to remove this if you dont want to use this
library TokenHelper {
    function getTokenBalance(address tokenAddress, address targetAddress) internal view returns (uint256) {
        (bool success, bytes memory data) =
            tokenAddress.staticcall(abi.encodeWithSignature("balanceOf(address)", targetAddress));
        require(success, "Failed to get token balance");
        return abi.decode(data, (uint256));
    }

    function getTokenDecimals(address tokenAddress) internal view returns (uint8) {
        (bool success, bytes memory data) = tokenAddress.staticcall(abi.encodeWithSignature("decimals()"));
        require(success, "Failed to get token decimals");
        return abi.decode(data, (uint8));
    }
}

contract ExploitScript is Test {
    uint256 blocknumToForkFrom = 1234567;

    //Change this to the target token to get token balance of,Keep it address 0 if its ETH that is gotten at the end of the exploit
    address fundingToken = address(0);

    function getFundingBal() internal view returns (uint256) {
        return fundingToken == address(0) ? address(this).balance : TokenHelper.getTokenBalance(fundingToken, address(this));
    }

    function getFundingDecimals() internal view returns (uint8) {
        return fundingToken == address(0) ? 18 : TokenHelper.getTokenDecimals(fundingToken);
    }

    modifier balanceLog() {
        emit log_named_decimal_uint("Attacker ETH Balance Before exploit", getFundingBal(), getFundingDecimals());
        _;
        emit log_named_decimal_uint("Attacker ETH Balance After exploit", getFundingBal(), getFundingDecimals());
    }

    function setUp() public {
        vm.createSelectFork("mainnet", blocknumToForkFrom);
    }

    function testExploit() public balanceLog {
        //implement exploit code here
    }
}
